// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/datadog/datadog.go

// Package mock_datadog is a generated GoMock package.
package mock_datadog

import (
	gomock "github.com/golang/mock/gomock"
	go_datadog_api "github.com/zorkian/go-datadog-api"
	reflect "reflect"
)

// MockClientAPI is a mock of ClientAPI interface
type MockClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockClientAPIMockRecorder
}

// MockClientAPIMockRecorder is the mock recorder for MockClientAPI
type MockClientAPIMockRecorder struct {
	mock *MockClientAPI
}

// NewMockClientAPI creates a new mock instance
func NewMockClientAPI(ctrl *gomock.Controller) *MockClientAPI {
	mock := &MockClientAPI{ctrl: ctrl}
	mock.recorder = &MockClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientAPI) EXPECT() *MockClientAPIMockRecorder {
	return m.recorder
}

// GetMonitorsByTags mocks base method
func (m *MockClientAPI) GetMonitorsByTags(tags []string) ([]go_datadog_api.Monitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitorsByTags", tags)
	ret0, _ := ret[0].([]go_datadog_api.Monitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitorsByTags indicates an expected call of GetMonitorsByTags
func (mr *MockClientAPIMockRecorder) GetMonitorsByTags(tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitorsByTags", reflect.TypeOf((*MockClientAPI)(nil).GetMonitorsByTags), tags)
}

// CreateMonitor mocks base method
func (m *MockClientAPI) CreateMonitor(arg0 *go_datadog_api.Monitor) (*go_datadog_api.Monitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMonitor", arg0)
	ret0, _ := ret[0].(*go_datadog_api.Monitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMonitor indicates an expected call of CreateMonitor
func (mr *MockClientAPIMockRecorder) CreateMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonitor", reflect.TypeOf((*MockClientAPI)(nil).CreateMonitor), arg0)
}

// UpdateMonitor mocks base method
func (m *MockClientAPI) UpdateMonitor(arg0 *go_datadog_api.Monitor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMonitor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMonitor indicates an expected call of UpdateMonitor
func (mr *MockClientAPIMockRecorder) UpdateMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonitor", reflect.TypeOf((*MockClientAPI)(nil).UpdateMonitor), arg0)
}

// DeleteMonitor mocks base method
func (m *MockClientAPI) DeleteMonitor(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMonitor", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMonitor indicates an expected call of DeleteMonitor
func (mr *MockClientAPIMockRecorder) DeleteMonitor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitor", reflect.TypeOf((*MockClientAPI)(nil).DeleteMonitor), id)
}
